
/*  A Bison parser, made from yacc.yy
 by  GNU Bison version 1.25
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	T_AMPERSAND	258
#define	T_ANY	259
#define	T_ASTERISK	260
#define	T_ATTRIBUTE	261
#define	T_BOOLEAN	262
#define	T_CASE	263
#define	T_CHAR	264
#define	T_CHARACTER_LITERAL	265
#define	T_CIRCUMFLEX	266
#define	T_COLON	267
#define	T_COMMA	268
#define	T_CONST	269
#define	T_CONTEXT	270
#define	T_DEFAULT	271
#define	T_DOUBLE	272
#define	T_ENUM	273
#define	T_EQUAL	274
#define	T_EXCEPTION	275
#define	T_FALSE	276
#define	T_FIXED	277
#define	T_FIXED_PT_LITERAL	278
#define	T_FLOAT	279
#define	T_FLOATING_PT_LITERAL	280
#define	T_GREATER_THAN_SIGN	281
#define	T_IDENTIFIER	282
#define	T_IN	283
#define	T_INOUT	284
#define	T_INTEGER_LITERAL	285
#define	T_INTERFACE	286
#define	T_LEFT_CURLY_BRACKET	287
#define	T_LEFT_PARANTHESIS	288
#define	T_LEFT_SQUARE_BRACKET	289
#define	T_LESS_THAN_SIGN	290
#define	T_LONG	291
#define	T_MINUS_SIGN	292
#define	T_MODULE	293
#define	T_OCTET	294
#define	T_ONEWAY	295
#define	T_OUT	296
#define	T_PERCENT_SIGN	297
#define	T_PLUS_SIGN	298
#define	T_RAISES	299
#define	T_READONLY	300
#define	T_RIGHT_CURLY_BRACKET	301
#define	T_RIGHT_PARANTHESIS	302
#define	T_RIGHT_SQUARE_BRACKET	303
#define	T_SCOPE	304
#define	T_SEMICOLON	305
#define	T_SEQUENCE	306
#define	T_SHIFTLEFT	307
#define	T_SHIFTRIGHT	308
#define	T_SHORT	309
#define	T_SOLIDUS	310
#define	T_STRING	311
#define	T_STRING_LITERAL	312
#define	T_PRAGMA	313
#define	T_INCLUDE	314
#define	T_STRUCT	315
#define	T_SWITCH	316
#define	T_TILDE	317
#define	T_TRUE	318
#define	T_OBJECT	319
#define	T_TYPEDEF	320
#define	T_UNION	321
#define	T_UNSIGNED	322
#define	T_VERTICAL_LINE	323
#define	T_VOID	324
#define	T_WCHAR	325
#define	T_WSTRING	326
#define	T_UNKNOWN	327
#define	T_ABSTRACT	328
#define	T_VALUETYPE	329
#define	T_TRUNCATABLE	330
#define	T_SUPPORTS	331
#define	T_CUSTOM	332
#define	T_PUBLIC	333
#define	T_PRIVATE	334
#define	T_FACTORY	335
#define	T_NATIVE	336
#define	T_VALUEBASE	337

#line 23 "yacc.yy"


#include <CORBA.h>

#include <iostream.h>
#ifdef _WINDOWS
#include <malloc.h>
#endif

#include "parser.h"
#include "parsenode.h"
#include "prepro.h"
#include <mico/template_impl.h>

extern int yylex();

void yyerror( char *s )
{
  theParser->parse_error( idl_lexFile, s, idl_line_no );
}


#line 47 "yacc.yy"
typedef union 
{
  char              *ident;
  ParseNode         *node;
  CORBA::LongLong   _int;
  char             *_str;
  CORBA::Char       _char;
  CORBA::LongDouble _float;
  CORBA::LongDouble _fixed;
} YYSTYPE;
#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		392
#define	YYFLAG		-32768
#define	YYNTBASE	83

#define YYTRANSLATE(x) ((unsigned)(x) <= 337 ? yytranslate[x] : 192)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     1,     3,     5,     8,    11,    14,    17,    20,    23,
    26,    28,    30,    36,    38,    40,    45,    48,    52,    55,
    59,    63,    68,    69,    71,    73,    76,    79,    82,    85,
    88,    91,    93,    95,    98,   100,   102,   106,   108,   111,
   115,   117,   119,   121,   123,   126,   130,   134,   141,   149,
   150,   152,   157,   161,   163,   166,   170,   175,   178,   182,
   185,   190,   193,   195,   199,   202,   207,   209,   211,   213,
   215,   217,   222,   227,   234,   236,   240,   244,   246,   252,
   254,   256,   258,   260,   262,   264,   266,   268,   270,   272,
   274,   276,   280,   282,   286,   288,   292,   294,   298,   302,
   304,   308,   312,   314,   318,   322,   326,   329,   332,   335,
   337,   339,   341,   345,   347,   349,   351,   353,   355,   357,
   359,   361,   365,   367,   369,   371,   374,   376,   378,   380,
   382,   384,   386,   388,   390,   392,   394,   396,   398,   400,
   402,   404,   406,   408,   410,   412,   414,   416,   418,   422,
   424,   426,   428,   430,   432,   434,   437,   439,   441,   443,
   445,   447,   449,   451,   454,   456,   458,   460,   463,   466,
   470,   472,   474,   476,   478,   480,   482,   488,   490,   493,
   497,   499,   501,   511,   513,   515,   517,   519,   521,   523,
   526,   529,   533,   538,   542,   545,   548,   554,   556,   560,
   562,   569,   574,   579,   581,   586,   588,   591,   593,   596,
   600,   604,   609,   611,   615,   621,   622,   625,   632,   633,
   635,   637,   639,   643,   646,   648,   652,   656,   658,   660,
   662,   663,   668,   669,   674,   676,   680,   682,   685,   687,
   689,   691,   693,   700,   702
};

static const short yyrhs[] = {    -1,
    84,     0,    85,     0,    85,    84,     0,   129,    50,     0,
   116,    50,     0,   175,    50,     0,    87,    50,     0,    86,
    50,     0,    98,    50,     0,    58,     0,    59,     0,    38,
    27,    32,    84,    46,     0,    88,     0,    89,     0,    90,
    32,    91,    46,     0,    31,    27,     0,    73,    31,    27,
     0,    31,    27,     0,    31,    27,    94,     0,    73,    31,
    27,     0,    73,    31,    27,    94,     0,     0,    92,     0,
    93,     0,    93,    92,     0,   129,    50,     0,   116,    50,
     0,   175,    50,     0,   173,    50,     0,   177,    50,     0,
    58,     0,    59,     0,    12,    95,     0,    96,     0,    97,
     0,    97,    13,    96,     0,    27,     0,    49,    27,     0,
    97,    49,    27,     0,   103,     0,   101,     0,   100,     0,
    99,     0,    74,    27,     0,    73,    74,    27,     0,    74,
    27,   130,     0,    73,    74,    27,    32,   102,    46,     0,
    73,    74,    27,   106,    32,   102,    46,     0,     0,    92,
     0,   105,    32,   104,    46,     0,   105,    32,    46,     0,
   110,     0,   110,   104,     0,    74,    27,   106,     0,    77,
    74,    27,   106,     0,    74,    27,     0,    77,    74,    27,
     0,    12,   107,     0,    12,   107,    76,    95,     0,    76,
    95,     0,   109,     0,   109,    13,   108,     0,    75,   109,
     0,    75,   109,    13,   108,     0,    96,     0,    97,     0,
    93,     0,   111,     0,   112,     0,    78,   130,   135,    50,
     0,    79,   130,   135,    50,     0,    80,    27,    33,   113,
    47,    50,     0,   114,     0,   114,    13,   113,     0,   115,
   188,   137,     0,    28,     0,    14,   117,    27,    19,   118,
     0,   140,     0,   149,     0,   150,     0,   151,     0,   139,
     0,   168,     0,   169,     0,   190,     0,    97,     0,   152,
     0,   119,     0,   120,     0,   119,    68,   120,     0,   121,
     0,   120,    11,   121,     0,   122,     0,   121,     3,   122,
     0,   123,     0,   122,    53,   123,     0,   122,    52,   123,
     0,   124,     0,   123,    43,   124,     0,   123,    37,   124,
     0,   125,     0,   124,     5,   125,     0,   124,    55,   125,
     0,   124,    42,   125,     0,    37,   126,     0,    43,   126,
     0,    62,   126,     0,   126,     0,    97,     0,   127,     0,
    33,   118,    47,     0,    30,     0,   187,     0,    10,     0,
    23,     0,    25,     0,    63,     0,    21,     0,   118,     0,
    65,   130,   135,     0,   155,     0,   158,     0,   164,     0,
    81,   137,     0,   131,     0,   134,     0,   132,     0,   133,
     0,    97,     0,   139,     0,   140,     0,   149,     0,   150,
     0,   151,     0,   152,     0,   153,     0,   154,     0,   191,
     0,   167,     0,   168,     0,   169,     0,   189,     0,   155,
     0,   158,     0,   164,     0,   136,     0,   136,    13,   135,
     0,   137,     0,   138,     0,    27,     0,   170,     0,    24,
     0,    17,     0,    36,    17,     0,   141,     0,   145,     0,
   143,     0,   142,     0,   144,     0,    54,     0,    36,     0,
    36,    36,     0,   147,     0,   146,     0,   148,     0,    67,
    54,     0,    67,    36,     0,    67,    36,    36,     0,     9,
     0,    70,     0,     7,     0,    39,     0,     4,     0,    64,
     0,    60,    27,    32,   156,    46,     0,   157,     0,   157,
   156,     0,   130,   135,    50,     0,    58,     0,    59,     0,
    66,    27,    61,    33,   159,    47,    32,   160,    46,     0,
   140,     0,   149,     0,   151,     0,   164,     0,    97,     0,
   161,     0,   161,   160,     0,   162,   161,     0,   162,   163,
    50,     0,   162,    58,   163,    50,     0,     8,   118,    12,
     0,    16,    12,     0,   130,   136,     0,    18,    27,    32,
   165,    46,     0,   166,     0,   166,    13,   165,     0,    27,
     0,    51,    35,   131,    13,   128,    26,     0,    51,    35,
   131,    26,     0,    56,    35,   128,    26,     0,    56,     0,
    71,    35,   128,    26,     0,    71,     0,    27,   171,     0,
   172,     0,   172,   171,     0,    34,   128,    48,     0,     6,
   188,   174,     0,    45,     6,   188,   174,     0,   137,     0,
   137,    13,   174,     0,    20,    27,    32,   176,    46,     0,
     0,   157,   176,     0,   178,   179,    27,   180,   184,   185,
     0,     0,    40,     0,   188,     0,    69,     0,    33,   181,
    47,     0,    33,    47,     0,   182,     0,   182,    13,   181,
     0,   183,   188,   137,     0,    28,     0,    41,     0,    29,
     0,     0,    44,    33,    96,    47,     0,     0,    15,    33,
   186,    47,     0,   187,     0,   187,    13,   186,     0,    57,
     0,    57,   187,     0,   132,     0,   168,     0,   169,     0,
    97,     0,    22,    35,   128,    13,    30,    26,     0,    22,
     0,    82,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   254,   258,   266,   270,   279,   283,   287,   291,   295,   299,
   303,   308,   317,   327,   331,   339,   348,   353,   362,   367,
   373,   378,   388,   392,   399,   403,   412,   416,   420,   424,
   428,   432,   437,   446,   453,   457,   461,   470,   475,   483,
   496,   497,   498,   499,   504,   509,   518,   527,   535,   547,
   551,   559,   564,   571,   575,   584,   589,   594,   599,   608,
   612,   617,   625,   630,   636,   641,   650,   655,   660,   661,
   662,   667,   671,   679,   690,   694,   703,   711,   719,   728,
   732,   736,   740,   744,   748,   752,   756,   760,   764,   772,
   780,   784,   792,   796,   804,   808,   816,   820,   824,   832,
   836,   840,   848,   852,   856,   860,   869,   873,   877,   881,
   889,   893,   897,   906,   911,   916,   921,   926,   931,   936,
   945,   954,   958,   962,   966,   970,   978,   982,   990,   994,
   998,  1006,  1010,  1014,  1018,  1022,  1026,  1030,  1034,  1038,
  1046,  1050,  1054,  1058,  1066,  1070,  1074,  1082,  1086,  1095,
  1099,  1107,  1116,  1124,  1128,  1132,  1140,  1144,  1152,  1156,
  1160,  1168,  1176,  1184,  1192,  1196,  1200,  1208,  1216,  1224,
  1232,  1240,  1248,  1256,  1264,  1272,  1280,  1290,  1294,  1303,
  1307,  1312,  1321,  1332,  1336,  1340,  1344,  1348,  1356,  1360,
  1368,  1372,  1377,  1389,  1393,  1401,  1409,  1418,  1422,  1430,
  1439,  1444,  1452,  1456,  1464,  1468,  1476,  1484,  1488,  1497,
  1505,  1509,  1516,  1520,  1529,  1538,  1542,  1551,  1561,  1565,
  1573,  1577,  1585,  1589,  1596,  1600,  1609,  1617,  1621,  1625,
  1633,  1637,  1645,  1649,  1656,  1661,  1669,  1673,  1700,  1704,
  1708,  1712,  1720,  1730,  1738
};
#endif


#if YYDEBUG != 0 || defined (YYERROR_VERBOSE)

static const char * const yytname[] = {   "$","error","$undefined.","T_AMPERSAND",
"T_ANY","T_ASTERISK","T_ATTRIBUTE","T_BOOLEAN","T_CASE","T_CHAR","T_CHARACTER_LITERAL",
"T_CIRCUMFLEX","T_COLON","T_COMMA","T_CONST","T_CONTEXT","T_DEFAULT","T_DOUBLE",
"T_ENUM","T_EQUAL","T_EXCEPTION","T_FALSE","T_FIXED","T_FIXED_PT_LITERAL","T_FLOAT",
"T_FLOATING_PT_LITERAL","T_GREATER_THAN_SIGN","T_IDENTIFIER","T_IN","T_INOUT",
"T_INTEGER_LITERAL","T_INTERFACE","T_LEFT_CURLY_BRACKET","T_LEFT_PARANTHESIS",
"T_LEFT_SQUARE_BRACKET","T_LESS_THAN_SIGN","T_LONG","T_MINUS_SIGN","T_MODULE",
"T_OCTET","T_ONEWAY","T_OUT","T_PERCENT_SIGN","T_PLUS_SIGN","T_RAISES","T_READONLY",
"T_RIGHT_CURLY_BRACKET","T_RIGHT_PARANTHESIS","T_RIGHT_SQUARE_BRACKET","T_SCOPE",
"T_SEMICOLON","T_SEQUENCE","T_SHIFTLEFT","T_SHIFTRIGHT","T_SHORT","T_SOLIDUS",
"T_STRING","T_STRING_LITERAL","T_PRAGMA","T_INCLUDE","T_STRUCT","T_SWITCH","T_TILDE",
"T_TRUE","T_OBJECT","T_TYPEDEF","T_UNION","T_UNSIGNED","T_VERTICAL_LINE","T_VOID",
"T_WCHAR","T_WSTRING","T_UNKNOWN","T_ABSTRACT","T_VALUETYPE","T_TRUNCATABLE",
"T_SUPPORTS","T_CUSTOM","T_PUBLIC","T_PRIVATE","T_FACTORY","T_NATIVE","T_VALUEBASE",
"specification","definitions","definition","module","interface","interface_dcl",
"forward_dcl","interface_header","interface_body","exports","export","interface_inheritance_spec",
"interface_names","scoped_names","scoped_name","value","value_forward_dcl","value_box_dcl",
"value_abs_dcl","value_body","value_dcl","value_elements","value_header","value_inheritance_spec",
"value_inheritance_bases","value_names","value_name","value_element","state_member",
"init_dcl","init_param_decls","init_param_decl","init_param_attribute","const_dcl",
"const_type","const_exp","or_expr","xor_expr","and_expr","shift_expr","add_expr",
"mult_expr","unary_expr","primary_expr","literal","positive_int_const","type_dcl",
"type_spec","simple_type_spec","base_type_spec","template_type_spec","constr_type_spec",
"declarators","declarator","simple_declarator","complex_declarator","floating_pt_type",
"integer_type","signed_int","signed_short_int","signed_long_int","signed_longlong_int",
"unsigned_int","unsigned_short_int","unsigned_long_int","unsigned_longlong_int",
"char_type","wide_char_type","boolean_type","octet_type","any_type","object_type",
"struct_type","member_list","member","union_type","switch_type_spec","switch_body",
"case","case_label","element_spec","enum_type","enumerators","enumerator","sequence_type",
"string_type","wide_string_type","array_declarator","fixed_array_sizes","fixed_array_size",
"attr_dcl","simple_declarators","except_dcl","members","op_dcl","op_attribute",
"op_type_spec","parameter_dcls","param_dcls","param_dcl","param_attribute","raises_expr",
"context_expr","string_literals","T_string_literal","param_type_spec","fixed_pt_type",
"fixed_pt_const_type","value_base_type", NULL
};
#endif

static const short yyr1[] = {     0,
    83,    83,    84,    84,    85,    85,    85,    85,    85,    85,
    85,    85,    86,    87,    87,    88,    89,    89,    90,    90,
    90,    90,    91,    91,    92,    92,    93,    93,    93,    93,
    93,    93,    93,    94,    95,    96,    96,    97,    97,    97,
    98,    98,    98,    98,    99,    99,   100,   101,   101,   102,
   102,   103,   103,   104,   104,   105,   105,   105,   105,   106,
   106,   106,   107,   107,   107,   107,   108,   109,   110,   110,
   110,   111,   111,   112,   113,   113,   114,   115,   116,   117,
   117,   117,   117,   117,   117,   117,   117,   117,   117,   118,
   119,   119,   120,   120,   121,   121,   122,   122,   122,   123,
   123,   123,   124,   124,   124,   124,   125,   125,   125,   125,
   126,   126,   126,   127,   127,   127,   127,   127,   127,   127,
   128,   129,   129,   129,   129,   129,   130,   130,   131,   131,
   131,   132,   132,   132,   132,   132,   132,   132,   132,   132,
   133,   133,   133,   133,   134,   134,   134,   135,   135,   136,
   136,   137,   138,   139,   139,   139,   140,   140,   141,   141,
   141,   142,   143,   144,   145,   145,   145,   146,   147,   148,
   149,   150,   151,   152,   153,   154,   155,   156,   156,   157,
   157,   157,   158,   159,   159,   159,   159,   159,   160,   160,
   161,   161,   161,   162,   162,   163,   164,   165,   165,   166,
   167,   167,   168,   168,   169,   169,   170,   171,   171,   172,
   173,   173,   174,   174,   175,   176,   176,   177,   178,   178,
   179,   179,   180,   180,   181,   181,   182,   183,   183,   183,
   184,   184,   185,   185,   186,   186,   187,   187,   188,   188,
   188,   188,   189,   190,   191
};

static const short yyr2[] = {     0,
     0,     1,     1,     2,     2,     2,     2,     2,     2,     2,
     1,     1,     5,     1,     1,     4,     2,     3,     2,     3,
     3,     4,     0,     1,     1,     2,     2,     2,     2,     2,
     2,     1,     1,     2,     1,     1,     3,     1,     2,     3,
     1,     1,     1,     1,     2,     3,     3,     6,     7,     0,
     1,     4,     3,     1,     2,     3,     4,     2,     3,     2,
     4,     2,     1,     3,     2,     4,     1,     1,     1,     1,
     1,     4,     4,     6,     1,     3,     3,     1,     5,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     3,     1,     3,     1,     3,     3,     1,
     3,     3,     1,     3,     3,     3,     2,     2,     2,     1,
     1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
     1,     3,     1,     1,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     3,     1,
     1,     1,     1,     1,     1,     2,     1,     1,     1,     1,
     1,     1,     1,     2,     1,     1,     1,     2,     2,     3,
     1,     1,     1,     1,     1,     1,     5,     1,     2,     3,
     1,     1,     9,     1,     1,     1,     1,     1,     1,     2,
     2,     3,     4,     3,     2,     2,     5,     1,     3,     1,
     6,     4,     4,     1,     4,     1,     2,     1,     2,     3,
     3,     4,     1,     3,     5,     0,     2,     6,     0,     1,
     1,     1,     3,     2,     1,     3,     3,     1,     1,     1,
     0,     4,     0,     4,     1,     3,     1,     2,     1,     1,
     1,     1,     6,     1,     1
};

static const short yydefact[] = {     1,
     0,     0,     0,     0,     0,    11,    12,     0,     0,     0,
     0,     0,     0,     0,     2,     3,     0,     0,    14,    15,
     0,     0,    44,    43,    42,    41,     0,     0,     0,   123,
   124,   125,     0,   173,   171,   155,   244,   154,    38,   163,
   174,     0,   162,   204,     0,   172,   206,    88,     0,    84,
    80,   157,   160,   159,   161,   158,   166,   165,   167,    81,
    82,    83,    89,    85,    86,    87,     0,     0,    17,     0,
     0,   175,     0,     0,   176,   245,   131,     0,   127,   129,
   130,   128,   132,   133,   134,   135,   136,   137,   138,   139,
   145,   146,   147,   141,   142,   143,   144,   140,     0,     0,
     0,    45,     0,   152,   126,     4,     9,     8,   219,    10,
   219,     6,     5,     7,   156,   164,    39,     0,   169,   168,
     0,     0,     0,     0,   216,     0,    20,     0,     0,     0,
     0,   152,   122,   148,   150,   151,   153,     0,    18,    46,
     0,     0,    56,    47,    59,     0,   220,     0,    32,    33,
     0,    24,   219,     0,     0,     0,     0,     0,     0,    53,
     0,     0,     0,    69,     0,   219,    70,    71,   116,   120,
   117,   118,   114,     0,     0,     0,   237,     0,   119,   111,
   121,    90,    91,    93,    95,    97,   100,   103,   110,   112,
     0,   115,   170,     0,    40,     0,   200,     0,   198,   181,
   182,     0,   216,     0,    34,    35,    36,     0,     0,   178,
     0,     0,     0,   207,   208,     0,     0,    22,   219,     0,
     0,    68,    60,    63,    62,    57,   242,   239,   240,   241,
     0,     0,    16,    26,    28,    27,    30,    29,    31,   222,
     0,   221,     0,     0,     0,    52,    55,     0,   107,   108,
   238,   109,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   203,   205,    79,   197,     0,     0,   217,   215,
     0,    13,   177,   179,     0,     0,   202,     0,   209,   149,
   163,   188,   184,   185,   186,     0,   187,    51,     0,   219,
    65,     0,     0,   213,   211,     0,     0,     0,     0,     0,
   113,    92,    94,    96,    99,    98,   102,   101,   104,   106,
   105,   199,   180,    37,     0,     0,   210,     0,    48,     0,
     0,    61,    67,    64,     0,   212,     0,   231,    72,    73,
    78,     0,    75,     0,   243,   201,     0,    49,    66,   214,
   228,   230,   229,   224,     0,   225,     0,     0,   233,     0,
     0,     0,     0,     0,     0,   189,     0,   223,     0,     0,
     0,     0,   218,    74,    76,    77,     0,   195,   183,   190,
     0,     0,   191,     0,   226,   227,     0,     0,   194,     0,
   196,   192,   232,     0,   235,   193,   234,     0,   236,     0,
     0,     0
};

static const short yydefgoto[] = {   390,
    15,    16,    17,    18,    19,    20,    21,   151,   288,   153,
   127,   205,   206,   180,    22,    23,    24,    25,   289,    26,
   165,    27,   143,   223,   324,   224,   166,   167,   168,   332,
   333,   334,   154,    49,   181,   182,   183,   184,   185,   186,
   187,   188,   189,   190,   191,   155,   202,    79,    80,    81,
    82,   133,   134,   135,   136,    83,    84,    52,    53,    54,
    55,    56,    57,    58,    59,    85,    86,    87,    88,    89,
    90,    91,   209,   203,    92,   286,   355,   356,   357,   374,
    93,   198,   199,    94,    95,    96,   137,   214,   215,   156,
   295,   157,   204,   158,   159,   241,   328,   345,   346,   347,
   349,   363,   384,   192,   231,    97,    66,    98
};

static const short yypact[] = {   714,
   777,    43,    56,    61,    82,-32768,-32768,    87,   486,    92,
    10,    94,   -38,    99,-32768,   714,    98,   105,-32768,-32768,
    23,   107,-32768,-32768,-32768,-32768,   100,   116,   120,-32768,
-32768,-32768,   125,-32768,-32768,-32768,-32768,-32768,-32768,    21,
-32768,   149,-32768,   148,     7,-32768,   150,   140,   163,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,   159,   160,    37,   161,
   162,-32768,   164,   166,-32768,-32768,   140,   169,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   136,   171,
   176,   239,   178,-32768,-32768,-32768,-32768,-32768,   678,-32768,
   599,-32768,-32768,-32768,-32768,-32768,-32768,   775,   170,-32768,
   775,   180,   191,   184,   418,    26,-32768,   714,   418,   775,
    41,   179,-32768,   199,-32768,-32768,-32768,   182,    47,    20,
    27,    26,-32768,-32768,    13,   560,-32768,   211,-32768,-32768,
   172,-32768,   702,   174,   177,   183,   188,   189,   524,-32768,
   486,   486,   194,-32768,   195,   623,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,   775,   416,   416,   165,   416,-32768,   140,
-32768,   181,   217,   231,    46,    35,    32,-32768,-32768,-32768,
   214,-32768,-32768,   216,-32768,   775,-32768,   198,   232,-32768,
-32768,   169,   418,   201,-32768,-32768,    17,   204,   206,   418,
   240,    34,   775,-32768,   179,   169,    64,-32768,   711,   222,
    26,   140,   186,   242,-32768,-32768,   140,-32768,-32768,-32768,
    99,   560,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
   233,-32768,   169,   169,   225,-32768,-32768,   212,-32768,-32768,
-32768,-32768,   775,   775,   775,   775,   775,   775,   775,   775,
   775,   775,-32768,-32768,-32768,-32768,   184,   215,-32768,-32768,
    26,-32768,-32768,-32768,   234,   775,-32768,   219,-32768,-32768,
   236,   140,-32768,-32768,-32768,   221,-32768,-32768,   223,   711,
   260,    26,    26,   261,-32768,    99,   243,   227,   229,   252,
-32768,   217,   231,    46,    35,    35,    32,    32,-32768,-32768,
-32768,-32768,-32768,-32768,   255,   256,-32768,   251,-32768,   241,
    26,-32768,-32768,-32768,    99,-32768,   139,   245,-32768,-32768,
-32768,   238,   273,   560,-32768,-32768,    48,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,   247,   284,   560,   265,   285,   254,
   252,    99,   775,   290,   266,    48,   350,-32768,    75,    99,
    26,   274,-32768,-32768,-32768,-32768,   299,-32768,-32768,-32768,
   486,   169,-32768,   264,-32768,-32768,   269,   165,-32768,   267,
-32768,-32768,-32768,   271,   306,-32768,-32768,   165,-32768,   322,
   323,-32768
};

static const short yypgoto[] = {-32768,
     5,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -67,   -85,
   185,  -127,  -254,    -1,-32768,-32768,-32768,-32768,    36,-32768,
   168,-32768,   -94,-32768,     8,   104,-32768,-32768,-32768,   -24,
-32768,-32768,    19,-32768,  -165,-32768,    77,    74,    76,   -83,
   -77,  -118,   -40,-32768,  -107,    24,    -8,   205,  -139,-32768,
-32768,   -65,   -37,   -12,-32768,   331,     9,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,    12,   338,    15,   340,-32768,
-32768,    11,   132,  -100,    18,-32768,   -13,   -10,-32768,   -27,
     6,    78,-32768,-32768,     3,     4,-32768,   137,-32768,-32768,
  -263,    28,   152,-32768,-32768,-32768,-32768,    -6,-32768,-32768,
-32768,-32768,   -26,  -174,  -147,-32768,-32768,-32768
};


#define	YYLAST		848


static const short yytable[] = {    48,
    78,   105,   251,    64,    65,    32,   228,    77,   248,    51,
    30,   242,    60,   194,   225,    62,   314,    31,    28,   228,
   106,    32,   211,    29,   141,   164,    30,    33,   210,   271,
   265,   141,   326,    31,    28,   103,   260,   115,   323,    29,
   100,   152,   119,    33,    72,   220,   276,    34,   126,    35,
   226,   219,    39,    39,   109,   353,   116,    36,   126,   277,
   120,   340,    73,   354,    38,   122,   323,    39,   -19,    67,
    34,   258,    35,   261,    42,    42,    40,   259,   -21,    41,
   164,     2,    68,   101,   296,   234,   262,    69,   142,    42,
    39,    74,   228,   144,    43,   142,    44,   256,   257,   281,
    77,   221,   341,   342,    75,   278,   377,    45,    70,   210,
    46,    47,    42,    71,    32,   343,    32,    43,    99,    30,
   102,    30,    76,    77,   207,   104,    31,    77,    31,    77,
    45,   111,   208,    32,   249,   250,   268,   252,    30,   222,
   207,   309,   310,   311,   227,    31,    28,   107,   229,   230,
   280,    29,   243,   244,   108,    33,   110,   227,    32,    77,
    77,   229,   230,    30,   322,   112,   341,   342,   316,   113,
    31,    32,   305,   306,   114,   117,    30,   298,   299,   343,
   307,   308,   118,    31,   121,   344,   352,   367,   122,   123,
   124,   125,   128,   129,   228,   132,   138,   139,   130,   360,
   131,    77,   140,   385,   145,   193,   195,   228,    77,   196,
   197,   216,   213,   385,   217,   282,   232,   233,   294,   222,
   245,   177,   287,   235,    32,   283,   236,   254,   284,    30,
   227,   285,   237,   255,   229,   230,    31,   238,   239,   263,
   246,   264,    72,   266,   267,    34,   270,    35,   253,   272,
   141,   273,   275,   290,   293,    36,     2,   300,   301,   297,
    73,   292,    38,   315,   313,    39,   317,   318,   319,   207,
   -58,   116,   321,   325,    40,   327,   329,    41,   330,   331,
   335,   336,   337,   294,   350,   351,   338,    42,   348,    74,
   207,   207,    43,   358,    44,    32,   359,   361,     8,   362,
    30,   368,    75,   364,    10,    45,   378,    31,    46,    47,
   379,   369,   294,   382,   142,   383,   386,   387,   388,   207,
    76,   391,   392,   218,   291,   320,   365,   303,   339,   302,
   304,    50,   227,   247,   381,   212,   229,   230,    61,   366,
    63,   274,   370,   380,   312,   227,   373,   376,   372,   229,
   230,   279,   375,    72,   269,    77,    34,   353,    35,   207,
     0,   389,   372,     0,     0,   354,    36,     2,     0,    77,
     0,    73,     0,    38,     0,     0,    39,     0,     0,     0,
     0,     0,     0,     0,     0,    40,     0,     0,    41,     0,
     0,     0,     0,     0,     0,     0,     0,     0,    42,     0,
    74,     0,     0,    43,     0,    44,     0,   371,     0,     8,
     0,     0,     0,    75,     0,    10,    45,     0,     0,    46,
    47,    72,     0,     0,    34,   169,    35,     0,     0,     0,
     0,    76,     0,     0,    36,     2,   170,     0,   171,    73,
   172,    38,    39,     0,    39,   173,     0,     0,   174,     0,
     0,     0,     0,    40,     0,     0,    41,     0,     0,     0,
     0,     0,     0,     0,    42,     0,    42,     0,    74,     0,
     0,    43,   177,    44,     0,   200,   201,     8,   179,     0,
     0,    75,     0,    10,    45,     0,     0,    46,    47,    72,
     0,     0,    34,     0,    35,     0,     0,     0,     0,    76,
     0,     0,    36,     2,     0,     0,     0,    73,     0,    38,
     0,     0,    39,     0,     0,     0,     0,     0,     0,     0,
     0,    40,     0,     0,    41,     0,     0,    72,     0,     0,
    34,     0,    35,     0,    42,     0,    74,     0,     0,    43,
    36,    44,     0,     0,     0,     8,     0,    38,     0,    75,
    39,    10,    45,     0,     0,    46,    47,     0,     0,    40,
     0,     0,    41,    72,     0,     0,    34,    76,    35,     0,
     0,     0,    42,     0,     0,     0,    36,    43,     0,    44,
     0,     0,     0,    38,     0,     0,    39,    75,     0,     0,
    45,     0,   240,    46,    47,    40,     0,     0,    41,     0,
     0,     0,     0,     0,   146,    76,     0,     0,    42,     0,
     0,     0,     1,    43,     0,    44,     2,     0,     3,     0,
     0,     0,     0,    75,     0,     0,    45,     0,   146,    46,
    47,     0,     0,     0,     0,     0,     1,     0,   147,     0,
     2,    76,     3,   148,   160,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,   149,   150,     8,     0,
     0,     0,   147,     9,    10,     0,     0,   148,   -54,     0,
     0,     0,     0,     0,     0,     0,   161,   162,   163,    14,
   149,   150,     8,   146,     0,     0,     0,     9,    10,     0,
     0,     1,     0,     0,     0,     2,     0,     3,     0,     0,
   161,   162,   163,    14,     0,     0,     0,   146,     0,     0,
     0,     0,     0,     0,     0,     1,   146,   147,     0,     2,
     0,     3,   148,   -23,     1,     0,     0,     1,     2,     0,
     3,     2,     0,     3,     0,   149,   150,     8,     0,     0,
     0,   147,     9,    10,     4,     0,   148,   -25,     0,     0,
   147,     5,     0,     0,     0,   148,   -50,     0,    14,   149,
   150,     8,     0,     0,     0,     0,     9,    10,   149,   150,
     8,     6,     7,     8,     0,     9,    10,     0,     9,    10,
     0,     0,    14,    34,   169,    35,    11,    12,     0,     0,
    13,    14,     0,    36,    14,   170,     0,   171,    37,   172,
    38,    39,     0,    39,   173,     0,     0,   174,     0,     0,
     0,   175,    40,     0,     0,    41,     0,   176,     0,     0,
     0,     0,     0,    42,     0,    42,     0,     0,     0,     0,
    43,   177,    44,     0,     0,     0,   178,   179,     0,     0,
     0,     0,     0,    45,     0,     0,    46,    47
};

static const short yycheck[] = {     1,
     9,    14,   177,     1,     1,     0,   146,     9,   174,     1,
     0,   159,     1,   121,   142,     1,   271,     0,     0,   159,
    16,    16,   130,     0,    12,   111,    16,     0,   129,    13,
   196,    12,   296,    16,    16,    74,     5,    17,   293,    16,
    31,   109,    36,    16,     4,   140,    13,     7,    12,     9,
   145,    32,    27,    27,    32,     8,    36,    17,    12,    26,
    54,   325,    22,    16,    24,    49,   321,    27,    32,    27,
     7,    37,     9,    42,    49,    49,    36,    43,    32,    39,
   166,    18,    27,    74,   232,   153,    55,    27,    76,    49,
    27,    51,   232,   102,    54,    76,    56,    52,    53,    36,
   102,    75,    28,    29,    64,   213,   361,    67,    27,   210,
    70,    71,    49,    27,   109,    41,   111,    54,    27,   109,
    27,   111,    82,   125,   126,    27,   109,   129,   111,   131,
    67,    32,   128,   128,   175,   176,   202,   178,   128,   141,
   142,   260,   261,   262,   146,   128,   128,    50,   146,   146,
   216,   128,   161,   162,    50,   128,    50,   159,   153,   161,
   162,   159,   159,   153,   292,    50,    28,    29,   276,    50,
   153,   166,   256,   257,    50,    27,   166,   243,   244,    41,
   258,   259,    35,   166,    35,    47,   334,   353,    49,    27,
    32,    32,    32,    32,   334,    27,    61,    27,    35,   347,
    35,   203,    27,   378,    27,    36,    27,   347,   210,    19,
    27,    13,    34,   388,    33,   217,     6,    46,   231,   221,
    27,    57,   217,    50,   219,   217,    50,    11,   217,   219,
   232,   217,    50,     3,   232,   232,   219,    50,    50,    26,
    46,    26,     4,    46,    13,     7,    46,     9,    68,    46,
    12,    46,    13,    32,    13,    17,    18,    33,    47,    27,
    22,    76,    24,    30,    50,    27,    48,    47,    46,   271,
    32,    36,    13,    13,    36,    33,    50,    39,    50,    28,
    26,    26,    32,   296,    47,    13,    46,    49,    44,    51,
   292,   293,    54,    47,    56,   290,    13,    33,    60,    15,
   290,    12,    64,    50,    66,    67,    33,   290,    70,    71,
    12,    46,   325,    50,    76,    47,    50,    47,    13,   321,
    82,     0,     0,   139,   221,   290,   351,   254,   321,   253,
   255,     1,   334,   166,   372,   131,   334,   334,     1,   352,
     1,   210,   356,   371,   267,   347,   357,   360,   357,   347,
   347,   215,   359,     4,   203,   357,     7,     8,     9,   361,
    -1,   388,   371,    -1,    -1,    16,    17,    18,    -1,   371,
    -1,    22,    -1,    24,    -1,    -1,    27,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    51,    -1,    -1,    54,    -1,    56,    -1,    58,    -1,    60,
    -1,    -1,    -1,    64,    -1,    66,    67,    -1,    -1,    70,
    71,     4,    -1,    -1,     7,    10,     9,    -1,    -1,    -1,
    -1,    82,    -1,    -1,    17,    18,    21,    -1,    23,    22,
    25,    24,    27,    -1,    27,    30,    -1,    -1,    33,    -1,
    -1,    -1,    -1,    36,    -1,    -1,    39,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    49,    -1,    49,    -1,    51,    -1,
    -1,    54,    57,    56,    -1,    58,    59,    60,    63,    -1,
    -1,    64,    -1,    66,    67,    -1,    -1,    70,    71,     4,
    -1,    -1,     7,    -1,     9,    -1,    -1,    -1,    -1,    82,
    -1,    -1,    17,    18,    -1,    -1,    -1,    22,    -1,    24,
    -1,    -1,    27,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    36,    -1,    -1,    39,    -1,    -1,     4,    -1,    -1,
     7,    -1,     9,    -1,    49,    -1,    51,    -1,    -1,    54,
    17,    56,    -1,    -1,    -1,    60,    -1,    24,    -1,    64,
    27,    66,    67,    -1,    -1,    70,    71,    -1,    -1,    36,
    -1,    -1,    39,     4,    -1,    -1,     7,    82,     9,    -1,
    -1,    -1,    49,    -1,    -1,    -1,    17,    54,    -1,    56,
    -1,    -1,    -1,    24,    -1,    -1,    27,    64,    -1,    -1,
    67,    -1,    69,    70,    71,    36,    -1,    -1,    39,    -1,
    -1,    -1,    -1,    -1,     6,    82,    -1,    -1,    49,    -1,
    -1,    -1,    14,    54,    -1,    56,    18,    -1,    20,    -1,
    -1,    -1,    -1,    64,    -1,    -1,    67,    -1,     6,    70,
    71,    -1,    -1,    -1,    -1,    -1,    14,    -1,    40,    -1,
    18,    82,    20,    45,    46,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    58,    59,    60,    -1,
    -1,    -1,    40,    65,    66,    -1,    -1,    45,    46,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    78,    79,    80,    81,
    58,    59,    60,     6,    -1,    -1,    -1,    65,    66,    -1,
    -1,    14,    -1,    -1,    -1,    18,    -1,    20,    -1,    -1,
    78,    79,    80,    81,    -1,    -1,    -1,     6,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    14,     6,    40,    -1,    18,
    -1,    20,    45,    46,    14,    -1,    -1,    14,    18,    -1,
    20,    18,    -1,    20,    -1,    58,    59,    60,    -1,    -1,
    -1,    40,    65,    66,    31,    -1,    45,    46,    -1,    -1,
    40,    38,    -1,    -1,    -1,    45,    46,    -1,    81,    58,
    59,    60,    -1,    -1,    -1,    -1,    65,    66,    58,    59,
    60,    58,    59,    60,    -1,    65,    66,    -1,    65,    66,
    -1,    -1,    81,     7,    10,     9,    73,    74,    -1,    -1,
    77,    81,    -1,    17,    81,    21,    -1,    23,    22,    25,
    24,    27,    -1,    27,    30,    -1,    -1,    33,    -1,    -1,
    -1,    37,    36,    -1,    -1,    39,    -1,    43,    -1,    -1,
    -1,    -1,    -1,    49,    -1,    49,    -1,    -1,    -1,    -1,
    54,    57,    56,    -1,    -1,    -1,    62,    63,    -1,    -1,
    -1,    -1,    -1,    67,    -1,    -1,    70,    71
};
/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
#line 3 "/usr/share/bison.simple"

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if defined (MSDOS) && !defined (__TURBOC__)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

#ifndef YYPARSE_RETURN_TYPE
#define YYPARSE_RETURN_TYPE int
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
YYPARSE_RETURN_TYPE yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(TO,FROM,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (to, from, count)
     char *to;
     char *from;
     int count;
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *to, char *from, int count)
{
  register char *f = from;
  register char *t = to;
  register int i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

#line 196 "/usr/share/bison.simple"

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifdef __cplusplus
#define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#else /* not __cplusplus */
#define YYPARSE_PARAM_ARG YYPARSE_PARAM
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif /* not __cplusplus */
#else /* not YYPARSE_PARAM */
#define YYPARSE_PARAM_ARG
#define YYPARSE_PARAM_DECL
#endif /* not YYPARSE_PARAM */

YYPARSE_RETURN_TYPE
yyparse(YYPARSE_PARAM_ARG)
     YYPARSE_PARAM_DECL
{
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  int yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      int size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss, (char *)yyss1, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs, (char *)yyvs1, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls, (char *)yyls1, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 255 "yacc.yy"
{
	    theParser->setRootNode( NULL );
	  ;
    break;}
case 2:
#line 259 "yacc.yy"
{
	    theParser->setRootNode( yyvsp[0].node );
	  ;
    break;}
case 3:
#line 267 "yacc.yy"
{
	    yyval.node = new ParseNode( definitions, yyvsp[0].node );
	  ;
    break;}
case 4:
#line 271 "yacc.yy"
{
	    yyval.node = new ParseNode( definitions, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 5:
#line 280 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 6:
#line 284 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 7:
#line 288 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 8:
#line 292 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 9:
#line 296 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 10:
#line 300 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 11:
#line 304 "yacc.yy"
{
	    yyval.node = new ParseNode( t_pragma );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 12:
#line 309 "yacc.yy"
{
	    yyval.node = new ParseNode( t_include );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 13:
#line 319 "yacc.yy"
{
	    yyval.node = new ParseNode( t_module, yyvsp[-1].node );
	    yyval.node->setIdent( yyvsp[-3].ident );
	  ;
    break;}
case 14:
#line 328 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 15:
#line 332 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 16:
#line 341 "yacc.yy"
{
	    yyval.node = new ParseNode( interface_dcl, yyvsp[-3].node, yyvsp[-1].node );
	  ;
    break;}
case 17:
#line 349 "yacc.yy"
{
	    yyval.node = new ParseNode( forward_dcl );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 18:
#line 354 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_forward_dcl );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 19:
#line 363 "yacc.yy"
{
	    yyval.node = new ParseNode( interface_header );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 20:
#line 368 "yacc.yy"
{
	    yyval.node = new ParseNode( interface_header );
	    yyval.node->setIdent( yyvsp[-1].ident );
	    yyval.node->setBranch( 1, yyvsp[0].node );
	  ;
    break;}
case 21:
#line 374 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_interface_header );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 22:
#line 379 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_interface_header );
	    yyval.node->setIdent( yyvsp[-1].ident );
	    yyval.node->setBranch( 1, yyvsp[0].node );
	  ;
    break;}
case 23:
#line 389 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 24:
#line 393 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 25:
#line 400 "yacc.yy"
{
	    yyval.node = new ParseNode( exports, yyvsp[0].node );
	  ;
    break;}
case 26:
#line 404 "yacc.yy"
{
	    yyval.node = new ParseNode( exports, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 27:
#line 413 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 28:
#line 417 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 29:
#line 421 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 30:
#line 425 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 31:
#line 429 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 32:
#line 433 "yacc.yy"
{
	    yyval.node = new ParseNode( t_pragma );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 33:
#line 438 "yacc.yy"
{
	    yyval.node = new ParseNode( t_include );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 34:
#line 447 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 36:
#line 458 "yacc.yy"
{
	    yyval.node = new ParseNode( scoped_names, yyvsp[0].node );
	  ;
    break;}
case 37:
#line 462 "yacc.yy"
{
	    yyval.node = new ParseNode( scoped_names, yyvsp[-2].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 38:
#line 471 "yacc.yy"
{
	    yyval.node = new ParseNode( scoped_name );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 39:
#line 476 "yacc.yy"
{
	    yyval.node = new ParseNode( scoped_name );
	    string name = "::";
	    name += yyvsp[0].ident;
	    CORBA::string_free( yyvsp[0].ident );
	    yyval.node->setIdent( CORBA::string_dup( name.c_str() ) );
	  ;
    break;}
case 40:
#line 484 "yacc.yy"
{
	    yyval.node = yyvsp[-2].node;
	    string name = yyval.node->getIdent();
	    name += "::";
	    name += yyvsp[0].ident;
	    CORBA::string_free( yyvsp[0].ident );
	    yyval.node->setIdent( CORBA::string_dup( name.c_str() ) );
	  ;
    break;}
case 45:
#line 505 "yacc.yy"
{
	    yyval.node = new ParseNode( value_forward_dcl );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 46:
#line 510 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_value_forward_dcl );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 47:
#line 519 "yacc.yy"
{
	    yyval.node = new ParseNode( value_box_dcl, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-1].ident );
	  ;
    break;}
case 48:
#line 529 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_value_dcl );
	    yyval.node->setBranch( 1, new ParseNode( value_header ) );
	    yyval.node->getBranch( 1 )->setIdent( yyvsp[-3].ident );
	    yyval.node->setBranch( 2, yyvsp[-1].node );
	  ;
    break;}
case 49:
#line 537 "yacc.yy"
{
	    yyval.node = new ParseNode( abstract_value_dcl );
	    yyval.node->setBranch( 1, new ParseNode( value_header ) );
	    yyval.node->getBranch( 1 )->setIdent( yyvsp[-4].ident );
	    yyval.node->getBranch( 1 )->setBranch( 1, yyvsp[-3].node );
	    yyval.node->setBranch( 2, yyvsp[-1].node );
	  ;
    break;}
case 50:
#line 548 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 51:
#line 552 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 52:
#line 561 "yacc.yy"
{
	    yyval.node = new ParseNode( value_dcl, yyvsp[-3].node, yyvsp[-1].node );
	  ;
    break;}
case 53:
#line 565 "yacc.yy"
{
	    yyval.node = new ParseNode( value_dcl, yyvsp[-2].node );
	  ;
    break;}
case 54:
#line 572 "yacc.yy"
{
	    yyval.node = new ParseNode( value_elements, yyvsp[0].node );
	  ;
    break;}
case 55:
#line 576 "yacc.yy"
{
	    yyval.node = new ParseNode( value_elements, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 56:
#line 585 "yacc.yy"
{
	    yyval.node = new ParseNode( value_header, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-1].ident );
	  ;
    break;}
case 57:
#line 590 "yacc.yy"
{
	    yyval.node = new ParseNode( custom_value_header, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-1].ident );
	  ;
    break;}
case 58:
#line 595 "yacc.yy"
{
	    yyval.node = new ParseNode( value_header );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 59:
#line 600 "yacc.yy"
{
	    yyval.node = new ParseNode( custom_value_header );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 60:
#line 609 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 61:
#line 613 "yacc.yy"
{
	    yyval.node = yyvsp[-2].node;
	    yyval.node->setBranch( 4, yyvsp[0].node );
	  ;
    break;}
case 62:
#line 618 "yacc.yy"
{
	    yyval.node = new ParseNode( value_inheritance_spec );
	    yyval.node->setBranch( 4, yyvsp[0].node );
	  ;
    break;}
case 63:
#line 626 "yacc.yy"
{
	    yyval.node = new ParseNode( value_inheritance_spec );
	    yyval.node->setBranch( 1, yyvsp[0].node );
	  ;
    break;}
case 64:
#line 631 "yacc.yy"
{
	    yyval.node = new ParseNode( value_inheritance_spec );
	    yyval.node->setBranch( 1, yyvsp[-2].node );
	    yyval.node->setBranch( 3, yyvsp[0].node );
	  ;
    break;}
case 65:
#line 637 "yacc.yy"
{
	    yyval.node = new ParseNode( value_inheritance_spec );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 66:
#line 642 "yacc.yy"
{
	    yyval.node = new ParseNode( value_inheritance_spec );
	    yyval.node->setBranch( 2, yyvsp[-2].node );
	    yyval.node->setBranch( 3, yyvsp[0].node );
	  ;
    break;}
case 72:
#line 668 "yacc.yy"
{
	    yyval.node = new ParseNode( public_state_member, yyvsp[-2].node, yyvsp[-1].node );
	  ;
    break;}
case 73:
#line 672 "yacc.yy"
{
	    yyval.node = new ParseNode( private_state_member, yyvsp[-2].node, yyvsp[-1].node );
	  ;
    break;}
case 74:
#line 682 "yacc.yy"
{
	    yyval.node = new ParseNode( init_dcl, yyvsp[-2].node );
	    yyval.node->setIdent( yyvsp[-4].ident );
	  ;
    break;}
case 75:
#line 691 "yacc.yy"
{
	    yyval.node = new ParseNode( init_param_decls, yyvsp[0].node );
	  ;
    break;}
case 76:
#line 695 "yacc.yy"
{
	    yyval.node = new ParseNode( init_param_decls, yyvsp[-2].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 77:
#line 704 "yacc.yy"
{
	    yyval.node = new ParseNode( init_param_decl, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 78:
#line 712 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 79:
#line 720 "yacc.yy"
{
	    yyval.node = new ParseNode( const_dcl, yyvsp[-3].node, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-2].ident );
	  ;
    break;}
case 80:
#line 729 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 81:
#line 733 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 82:
#line 737 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 83:
#line 741 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 84:
#line 745 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 85:
#line 749 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 86:
#line 753 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 87:
#line 757 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 88:
#line 761 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 89:
#line 765 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 90:
#line 773 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 91:
#line 781 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 92:
#line 785 "yacc.yy"
{
	    yyval.node = new ParseNode( t_vertical_line, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 93:
#line 793 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 94:
#line 797 "yacc.yy"
{
	    yyval.node = new ParseNode( t_circumflex, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 95:
#line 805 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 96:
#line 809 "yacc.yy"
{
	    yyval.node = new ParseNode( t_ampersand, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 97:
#line 817 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 98:
#line 821 "yacc.yy"
{
	    yyval.node = new ParseNode( t_shiftright, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 99:
#line 825 "yacc.yy"
{
	    yyval.node = new ParseNode( t_shiftleft, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 100:
#line 833 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 101:
#line 837 "yacc.yy"
{
	    yyval.node = new ParseNode( t_plus_sign, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 102:
#line 841 "yacc.yy"
{
	    yyval.node = new ParseNode( t_minus_sign, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 103:
#line 849 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 104:
#line 853 "yacc.yy"
{
	    yyval.node = new ParseNode( t_asterik, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 105:
#line 857 "yacc.yy"
{
	    yyval.node = new ParseNode( t_solidus, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 106:
#line 861 "yacc.yy"
{
	    yyval.node = new ParseNode( t_percent_sign, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 107:
#line 870 "yacc.yy"
{
	    yyval.node = new ParseNode( t_minus_sign, yyvsp[0].node );
	  ;
    break;}
case 108:
#line 874 "yacc.yy"
{
	    yyval.node = new ParseNode( t_plus_sign, yyvsp[0].node );
	  ;
    break;}
case 109:
#line 878 "yacc.yy"
{
	    yyval.node = new ParseNode( t_tilde, yyvsp[0].node );
	  ;
    break;}
case 110:
#line 882 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 111:
#line 890 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 112:
#line 894 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 113:
#line 898 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 114:
#line 907 "yacc.yy"
{
	    yyval.node = new ParseNode( t_integer_literal );
	    yyval.node->setIntegerLiteral( yyvsp[0]._int );
	  ;
    break;}
case 115:
#line 912 "yacc.yy"
{
	    yyval.node = new ParseNode( t_string_literal );
	    yyval.node->setStringLiteral( yyvsp[0]._str );
	  ;
    break;}
case 116:
#line 917 "yacc.yy"
{
	    yyval.node = new ParseNode( t_character_literal );
	    yyval.node->setCharacterLiteral( yyvsp[0]._char );
	  ;
    break;}
case 117:
#line 922 "yacc.yy"
{
	    yyval.node = new ParseNode( t_fixed_pt_literal );
	    yyval.node->setFixedPtLiteral( yyvsp[0]._fixed );
	  ;
    break;}
case 118:
#line 927 "yacc.yy"
{
	    yyval.node = new ParseNode( t_floating_pt_literal );
	    yyval.node->setFloatingPtLiteral( yyvsp[0]._float );
	  ;
    break;}
case 119:
#line 932 "yacc.yy"
{
	    yyval.node = new ParseNode( t_boolean_literal );
	    yyval.node->setBooleanLiteral( true );
	  ;
    break;}
case 120:
#line 937 "yacc.yy"
{
	    yyval.node = new ParseNode( t_boolean_literal );
	    yyval.node->setBooleanLiteral( false );
	  ;
    break;}
case 121:
#line 946 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 122:
#line 955 "yacc.yy"
{
	    yyval.node = new ParseNode( t_typedef, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 123:
#line 959 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 124:
#line 963 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 125:
#line 967 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 126:
#line 971 "yacc.yy"
{
	    yyval.node = new ParseNode( t_native, yyvsp[0].node );
	  ;
    break;}
case 127:
#line 979 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 128:
#line 983 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 129:
#line 991 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 130:
#line 995 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 131:
#line 999 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 132:
#line 1007 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 133:
#line 1011 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 134:
#line 1015 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 135:
#line 1019 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 136:
#line 1023 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 137:
#line 1027 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 138:
#line 1031 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 139:
#line 1035 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 140:
#line 1039 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 141:
#line 1047 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 142:
#line 1051 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 143:
#line 1055 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 144:
#line 1059 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 145:
#line 1067 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 146:
#line 1071 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 147:
#line 1075 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 148:
#line 1083 "yacc.yy"
{
	    yyval.node = new ParseNode( declarators, yyvsp[0].node );
	  ;
    break;}
case 149:
#line 1087 "yacc.yy"
{
	    yyval.node = new ParseNode( declarators, yyvsp[-2].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 150:
#line 1096 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 151:
#line 1100 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 152:
#line 1108 "yacc.yy"
{
	    yyval.node = new ParseNode( simple_declarator );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 153:
#line 1117 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 154:
#line 1125 "yacc.yy"
{
	    yyval.node = new ParseNode( t_float );
	  ;
    break;}
case 155:
#line 1129 "yacc.yy"
{
	    yyval.node = new ParseNode( t_double );
	  ;
    break;}
case 156:
#line 1133 "yacc.yy"
{
	    yyval.node = new ParseNode( t_long_double );
	  ;
    break;}
case 157:
#line 1141 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 158:
#line 1145 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 159:
#line 1153 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 160:
#line 1157 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 161:
#line 1161 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 162:
#line 1169 "yacc.yy"
{
	    yyval.node = new ParseNode( t_short );
	  ;
    break;}
case 163:
#line 1177 "yacc.yy"
{
	    yyval.node = new ParseNode( t_long );
	  ;
    break;}
case 164:
#line 1185 "yacc.yy"
{
	    yyval.node = new ParseNode( t_longlong );
	  ;
    break;}
case 165:
#line 1193 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 166:
#line 1197 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 167:
#line 1201 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 168:
#line 1209 "yacc.yy"
{
	    yyval.node = new ParseNode( t_unsigned_short );
	  ;
    break;}
case 169:
#line 1217 "yacc.yy"
{
	    yyval.node = new ParseNode( t_unsigned_long );
	  ;
    break;}
case 170:
#line 1225 "yacc.yy"
{
	    yyval.node = new ParseNode( t_unsigned_longlong );
	  ;
    break;}
case 171:
#line 1233 "yacc.yy"
{
	    yyval.node = new ParseNode( t_char );
	  ;
    break;}
case 172:
#line 1241 "yacc.yy"
{
	    yyval.node = new ParseNode( t_wide_char );
	  ;
    break;}
case 173:
#line 1249 "yacc.yy"
{
	    yyval.node = new ParseNode( t_boolean );
	  ;
    break;}
case 174:
#line 1257 "yacc.yy"
{
	    yyval.node = new ParseNode( t_octet );
	  ;
    break;}
case 175:
#line 1265 "yacc.yy"
{
	    yyval.node = new ParseNode( t_any );
	  ;
    break;}
case 176:
#line 1273 "yacc.yy"
{
	    yyval.node = new ParseNode( t_object );
	  ;
    break;}
case 177:
#line 1282 "yacc.yy"
{
	    yyval.node = new ParseNode( struct_type, yyvsp[-1].node );
	    yyval.node->setIdent( yyvsp[-3].ident );
	  ;
    break;}
case 178:
#line 1291 "yacc.yy"
{
	    yyval.node = new ParseNode( member_list, yyvsp[0].node );
	  ;
    break;}
case 179:
#line 1295 "yacc.yy"
{
	    yyval.node = new ParseNode( member_list, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 180:
#line 1304 "yacc.yy"
{
	    yyval.node = new ParseNode( member, yyvsp[-2].node, yyvsp[-1].node );
	  ;
    break;}
case 181:
#line 1308 "yacc.yy"
{
	    yyval.node = new ParseNode( t_pragma );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 182:
#line 1313 "yacc.yy"
{
	    yyval.node = new ParseNode( t_include );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 183:
#line 1324 "yacc.yy"
{
	    yyval.node = new ParseNode( union_type, yyvsp[-4].node, yyvsp[-1].node );
	    yyval.node->setIdent( yyvsp[-7].ident );
	  ;
    break;}
case 184:
#line 1333 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 185:
#line 1337 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 186:
#line 1341 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 187:
#line 1345 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 188:
#line 1349 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 189:
#line 1357 "yacc.yy"
{
	    yyval.node = new ParseNode( switch_body, yyvsp[0].node );
	  ;
    break;}
case 190:
#line 1361 "yacc.yy"
{
	    yyval.node = new ParseNode( switch_body, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 191:
#line 1369 "yacc.yy"
{
	    yyval.node = new ParseNode( _case, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 192:
#line 1373 "yacc.yy"
{
	    yyval.node = new ParseNode( _case, yyvsp[-2].node );
	    yyval.node->setBranch( 3, yyvsp[-1].node );
	  ;
    break;}
case 193:
#line 1378 "yacc.yy"
{
	    yyval.node = new ParseNode( _case, yyvsp[-3].node );
	    yyval.node->setBranch( 3, yyvsp[-1].node );
	    ParseNode * pnode = new ParseNode (t_pragma);
	    pnode->setIdent (yyvsp[-2]._str);
	    yyval.node->setBranch( 4, pnode);
	  ;
    break;}
case 194:
#line 1390 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 195:
#line 1394 "yacc.yy"
{
	    yyval.node = new ParseNode( t_default );
	  ;
    break;}
case 196:
#line 1402 "yacc.yy"
{
	    yyval.node = new ParseNode( element_spec, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 197:
#line 1411 "yacc.yy"
{
	    yyval.node = new ParseNode( enum_type, yyvsp[-1].node );
	    yyval.node->setIdent( yyvsp[-3].ident );
	  ;
    break;}
case 198:
#line 1419 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 199:
#line 1423 "yacc.yy"
{
	    yyval.node = new ParseNode( enumerators, yyvsp[-2].node, yyvsp[0].node );
	  ;
    break;}
case 200:
#line 1431 "yacc.yy"
{
	    yyval.node = new ParseNode( enumerator );
	    yyval.node->setIdent( yyvsp[0].ident );
	  ;
    break;}
case 201:
#line 1441 "yacc.yy"
{
	    yyval.node = new ParseNode( t_sequence, yyvsp[-3].node, yyvsp[-1].node );
	  ;
    break;}
case 202:
#line 1445 "yacc.yy"
{
	    yyval.node = new ParseNode( t_sequence, yyvsp[-1].node );
	  ;
    break;}
case 203:
#line 1453 "yacc.yy"
{
	    yyval.node = new ParseNode( t_string, yyvsp[-1].node );
	  ;
    break;}
case 204:
#line 1457 "yacc.yy"
{
	    yyval.node = new ParseNode( t_string );
	  ;
    break;}
case 205:
#line 1465 "yacc.yy"
{
	    yyval.node = new ParseNode( t_wide_string, yyvsp[-1].node );
	  ;
    break;}
case 206:
#line 1469 "yacc.yy"
{
	    yyval.node = new ParseNode( t_wide_string );
	  ;
    break;}
case 207:
#line 1477 "yacc.yy"
{
	    yyval.node = new ParseNode( array_declarator, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-1].ident );
	  ;
    break;}
case 208:
#line 1485 "yacc.yy"
{
	    yyval.node = new ParseNode( fixed_array_sizes, yyvsp[0].node );
	  ;
    break;}
case 209:
#line 1489 "yacc.yy"
{
	    yyval.node = new ParseNode( fixed_array_sizes, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 210:
#line 1498 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 211:
#line 1506 "yacc.yy"
{
	    yyval.node = new ParseNode( t_attribute, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 212:
#line 1510 "yacc.yy"
{
	    yyval.node = new ParseNode( t_readonly_attribute, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 213:
#line 1517 "yacc.yy"
{
	    yyval.node = new ParseNode( simple_declarators, yyvsp[0].node );
	  ;
    break;}
case 214:
#line 1521 "yacc.yy"
{
	    yyval.node = new ParseNode( simple_declarators, yyvsp[-2].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 215:
#line 1531 "yacc.yy"
{
	    yyval.node = new ParseNode( except_dcl, yyvsp[-1].node );
	    yyval.node->setIdent( yyvsp[-3].ident );
	  ;
    break;}
case 216:
#line 1539 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 217:
#line 1543 "yacc.yy"
{
	    yyval.node = new ParseNode( member_list, yyvsp[-1].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 218:
#line 1553 "yacc.yy"
{
	    yyval.node = new ParseNode( op_dcl, yyvsp[-5].node, yyvsp[-4].node, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-3].ident );
	  ;
    break;}
case 219:
#line 1562 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 220:
#line 1566 "yacc.yy"
{
	    yyval.node = new ParseNode( t_oneway );
	  ;
    break;}
case 221:
#line 1574 "yacc.yy"
{
              yyval.node = new ParseNode( op_type_spec, yyvsp[0].node );
	  ;
    break;}
case 222:
#line 1578 "yacc.yy"
{
              yyval.node = new ParseNode( t_void );
	  ;
    break;}
case 223:
#line 1586 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 224:
#line 1590 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 225:
#line 1597 "yacc.yy"
{
	    yyval.node = new ParseNode( param_dcls, yyvsp[0].node );
	  ;
    break;}
case 226:
#line 1601 "yacc.yy"
{
	    yyval.node = new ParseNode( param_dcls, yyvsp[-2].node );
	    yyval.node->setBranch( 2, yyvsp[0].node );
	  ;
    break;}
case 227:
#line 1610 "yacc.yy"
{
	    yyval.node = new ParseNode( param_dcl, yyvsp[-2].node, yyvsp[-1].node, yyvsp[0].node );
	  ;
    break;}
case 228:
#line 1618 "yacc.yy"
{
	    yyval.node = new ParseNode( t_in );
	  ;
    break;}
case 229:
#line 1622 "yacc.yy"
{
	    yyval.node = new ParseNode( t_out );
	  ;
    break;}
case 230:
#line 1626 "yacc.yy"
{
	    yyval.node = new ParseNode( t_inout );
	  ;
    break;}
case 231:
#line 1634 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 232:
#line 1638 "yacc.yy"
{
	    yyval.node = new ParseNode( raises_expr, yyvsp[-1].node );
	  ;
    break;}
case 233:
#line 1646 "yacc.yy"
{
	    yyval.node = NULL;
	  ;
    break;}
case 234:
#line 1650 "yacc.yy"
{
	    yyval.node = yyvsp[-1].node;
	  ;
    break;}
case 235:
#line 1657 "yacc.yy"
{
	    yyval.node = new ParseNode( string_literals );
	    yyval.node->setIdent( yyvsp[0]._str );
	  ;
    break;}
case 236:
#line 1662 "yacc.yy"
{
	    yyval.node = new ParseNode( string_literals, yyvsp[0].node );
	    yyval.node->setIdent( yyvsp[-2]._str );
	  ;
    break;}
case 237:
#line 1670 "yacc.yy"
{
	    yyval._str = yyvsp[0]._str;
	  ;
    break;}
case 238:
#line 1674 "yacc.yy"
{
	    string s1 = string(yyvsp[-1]._str);
	    string s2 = string(yyvsp[0]._str);
	    CORBA::string_free( yyvsp[-1]._str );
	    CORBA::string_free( yyvsp[0]._str );
	    if( !(s2 == "") && !(s2[0] == '\\') ) {
	      int c = s2[0];
	      char b1 = c / 16 + '0';
              char b2 = c % 16 + '0';
	      if( b1 > '9' ) b1 += 'A' - '9' - 1;
	      if( b2 > '9' ) b2 += 'A' - '9' - 1;
	      //s2 = string("\\x") + string(b1) + string(b2) + s2.substr(1);
              string s3;
              s3 = string("\\x");
              s3 += b1;
              s3 += b2;
              s3 += s2.substr(1);
              s2 = s3;
	    }
	    s1 += s2;
	    yyval._str = CORBA::string_dup( s1.c_str() );
	  ;
    break;}
case 239:
#line 1701 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 240:
#line 1705 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 241:
#line 1709 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 242:
#line 1713 "yacc.yy"
{
	    yyval.node = yyvsp[0].node;
	  ;
    break;}
case 243:
#line 1722 "yacc.yy"
{
	    yyval.node = new ParseNode( fixed_pt_type, yyvsp[-3].node );
	    yyval.node->setIntegerLiteral( yyvsp[-1]._int );
	  ;
    break;}
case 244:
#line 1731 "yacc.yy"
{
	    yyval.node = new ParseNode( fixed_pt_type );
	  ;
    break;}
case 245:
#line 1739 "yacc.yy"
{
	    yyval.node = new ParseNode( t_valuebase );
	  ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
#line 498 "/usr/share/bison.simple"

  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 1744 "yacc.yy"

