#line 2 "scanner.cc"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/cvsroot/lbdmf/vendor/mico-2.3.2/idl/scanner.cc,v 1.1.2.2 2025/04/05 16:16:39 lothar Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 94
#define YY_END_OF_BUFFER 95
static yyconst short int yy_accept[346] =
    {   0,
        0,    0,   95,   93,    1,    2,   93,   93,   22,   26,
       93,   10,   11,   20,   18,   13,   19,   93,   21,   89,
       88,   12,   14,   27,   15,   28,   77,   77,   77,   77,
       77,    8,    9,   25,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,    6,   24,    7,   23,    0,   92,    0,    0,
        5,    0,    0,    0,   82,    3,   81,   89,    0,   84,
        0,   90,   88,   64,   17,   16,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   51,   77,   77,   77,

       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,    0,
        0,    0,   91,    0,    0,   86,    0,    3,   80,   85,
        0,    0,   79,   90,   77,   77,   77,   77,   77,   67,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       52,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,    0,    0,
        0,    0,    0,    0,   83,   87,    0,   78,   77,   77,
       44,   77,   77,   77,   77,   48,   33,   77,   77,   77,

       77,   77,   50,   77,   77,   77,   77,   77,   77,   41,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   39,
       77,   77,    0,    0,    0,    0,   43,   77,   77,   77,
       77,   77,   29,   77,   77,   77,   77,   77,   77,   35,
       31,   73,   77,   77,   77,   66,   77,   77,   77,   77,
       77,   77,   42,   77,   77,   77,   77,   77,   77,   46,
       77,   77,   34,   77,    0,   76,   77,   77,   77,   77,
       77,   58,   77,   32,   77,   77,   77,   65,   62,   72,
       77,   59,   74,   77,   77,   37,   45,   77,   47,   77,

       77,   77,   77,   77,    0,   77,   77,   77,   36,   75,
       49,   77,   61,   77,   60,   77,   77,   77,   77,   30,
       77,   77,   38,    0,    4,   77,   54,   77,   77,   77,
       69,   68,   57,   77,   40,   77,   63,   70,   71,   53,
       77,   55,   77,   56,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   20,   20,   21,   22,   23,
       24,   25,   26,    1,   27,   28,   29,   30,   31,   32,
       33,   33,   33,   33,   33,   34,   33,   33,   35,   33,
       33,   36,   37,   38,   39,   40,   33,   41,   33,   33,
       42,   43,   44,   45,   33,    1,   46,   47,   48,   49,

       50,   51,   52,   53,   54,   55,   33,   56,   57,   58,
       59,   60,   61,   62,   63,   64,   65,   66,   67,   68,
       69,   33,   70,   71,   72,   73,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[74] =
    {   0,
        1,    2,    3,    1,    4,    1,    1,    1,    5,    1,
        1,    1,    1,    1,    1,    1,    1,    6,    6,    7,
        1,    1,    1,    1,    1,    4,    7,    7,    7,    7,
        7,    7,    8,    8,    8,    8,    8,    8,    8,    8,
        9,    1,    4,    1,    1,    6,    6,    7,    7,    7,
        6,    8,    8,    8,    8,    8,    8,    9,    8,    8,
        8,    9,    8,    9,    8,    9,    8,    9,    8,    1,
        1,    1,    1
    } ;

static yyconst short int yy_base[358] =
    {   0,
        0,    0,  537,  538,  538,  538,   69,   72,  538,  538,
      493,  538,  538,  538,  538,  538,  538,   58,  518,   65,
       70,  513,  538,  510,  538,  507,    0,  504,  483,  493,
      482,  538,  538,  538,   33,  468,   46,   43,   36,   62,
      468,  466,  465,  477,   59,   17,   63,   72,   41,  464,
       75,   75,  538,  538,  538,  538,  121,  538,  109,  518,
      538,   84,  511,  111,  123,    0,  137,  162,  178,  538,
      156,    0,  183,  538,  538,  538,    0,  485,  463,  478,
      460,  452,  445,  449,  453,  448,  464,  451,  445,  456,
      441,  440,  456,  455,  434,  442,   76,  442,  450,  434,

      433,  446,  431,  440,  446,  438,  445,  429,  430,  426,
      427,  432,  420,  424,   95,  427,  428,  428,  416,  142,
        0,  142,  538,  186,    0,  538,  202,    0,  205,  538,
      224,  171,  211,    0,  442,  428,  446,  411,  411,    0,
      412,  417,  422,  409,   99,  406,  423,  421,  410,  416,
      401,  414,  417,  397,  411,  408,  394,  404,  407,  389,
        0,  389,  398,  390,  403,  386,  388,   94,  389,  384,
      389,  396,  386,  390,  378,  393,  395,  378,  229,  268,
      148,  231,  430,  233,  238,  538,  241,  244,  407,  389,
        0,  386,  373,  380,  383,    0,    0,  368,  381,  371,

      364,  372,    0,  367,  367,  376,  360,  359,  360,    0,
      365,  354,  355,  372,  371,  362,  365,  355,  363,  348,
      353,  362,  350,  360,  359,  357,  347,  352,  353,    0,
      340,  347,  202,  233,  162,  391,    0,  335,  370,  351,
      349,  349,    0,  326,  336,  336,  341,  326,  303,    0,
        0,    0,  310,  310,  305,    0,  285,  278,  292,  276,
      264,  263,    0,  261,  248,  248,  256,  262,  257,    0,
      248,  241,    0,  246,  180,    0,  257,  254,  236,  236,
      229,    0,  228,    0,  237,  221,  243,    0,    0,    0,
      235,    0,    0,  228,  235,    0,    0,  218,    0,  217,

      229,  229,  209,  225,  272,  211,  207,  206,    0,    0,
        0,  210,    0,  220,    0,  198,  216,  202,  200,    0,
      192,  158,    0,  213,  538,  160,    0,  156,  126,  120,
        0,    0,    0,  119,    0,   94,    0,    0,    0,    0,
       75,    0,   48,    0,  538,  319,  328,  337,  341,  347,
      353,  362,  366,  368,  370,  373,  380
    } ;

static yyconst short int yy_def[358] =
    {   0,
      345,    1,  345,  345,  345,  345,  346,  347,  345,  345,
      348,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  349,  349,  349,  349,
      349,  345,  345,  345,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  345,  345,  345,  345,  346,  345,  350,  347,
      345,  347,  345,  351,  345,  352,  345,  345,  345,  345,
      345,  353,  345,  345,  345,  345,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  346,
      354,  347,  345,  345,  355,  345,  345,  352,  345,  345,
      345,  345,  345,  353,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  346,  346,
      347,  345,  356,  345,  345,  345,  345,  345,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  346,  346,  347,  345,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  347,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,

      349,  349,  349,  349,  357,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  357,  345,  349,  349,  349,  349,  349,
      349,  349,  349,  349,  349,  349,  349,  349,  349,  349,
      349,  349,  349,  349,    0,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345
    } ;

static yyconst short int yy_nxt[612] =
    {   0,
        4,    5,    6,    5,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,   20,   21,   21,
       22,   23,   24,   25,   26,    4,   27,   27,   27,   27,
       27,   28,   27,   27,   29,   27,   27,   30,   27,   31,
       27,   32,    4,   33,   34,   35,   36,   37,   38,   39,
       40,   27,   27,   41,   27,   42,   43,   44,   45,   46,
       27,   47,   48,   49,   50,   51,   52,   27,   27,   53,
       54,   55,   56,   58,   61,   65,   65,   65,  104,   82,
       67,  105,   68,   68,   69,   67,   61,   73,   73,   73,
       83,   86,   90,   92,   70,   71,   84,  344,   87,   70,

       71,   91,  113,   93,   88,   72,  101,   94,  106,  114,
       89,   59,  107,   70,   71,   95,  102,   96,   70,   71,
      116,  108,  118,  103,  109,   58,  120,  120,  124,  124,
      343,   62,   72,  117,  154,  110,  111,  119,  112,  155,
       65,   65,   65,  342,   61,  122,   58,  221,  173,  121,
       61,  125,  126,  127,  129,  129,  129,  174,  222,  179,
      179,  198,  199,   59,   61,  341,  130,  131,  132,  340,
      132,  126,  127,  133,  133,  133,  121,   67,  125,   68,
       68,   69,   61,  339,   59,  130,  131,  181,  133,  133,
      133,   70,   71,   67,  123,   69,   69,   69,   67,  235,

       73,   73,   73,  182,  182,  338,   58,   70,   71,  337,
       70,   71,   70,   71,  184,  325,  184,  336,  275,  185,
      185,  185,  129,  129,  129,  305,   70,   71,  133,  133,
      133,   70,   71,   58,  186,  131,  187,   58,  187,  123,
      335,  188,  188,  188,   59,  334,  233,  233,   63,   63,
      185,  185,  185,  186,  131,  185,  185,  185,  188,  188,
      188,  188,  188,  188,  333,  332,  331,  330,  329,  328,
      327,   59,   58,  326,  325,   59,  323,  322,  321,  320,
      319,  318,  317,  316,  315,  234,  234,  234,  314,  313,
      312,  311,  310,  309,  234,  234,  234,  234,  234,  234,

      308,  307,  306,  304,  303,  302,  301,  300,  299,  298,
       59,  297,  296,  234,  234,  234,  234,  234,  234,   57,
      295,  294,   57,   57,   57,   57,   57,   57,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   63,  293,  292,
       63,  291,   63,   63,   63,   63,   77,   77,   77,   77,
       57,   57,   57,  290,  289,   57,   63,   63,   63,  288,
      287,   63,  128,  128,  286,  128,  128,  128,  128,  128,
      128,  134,  134,  180,  180,  183,  183,  236,  236,  236,
      324,  324,  324,  324,  324,  324,  324,  324,  324,  285,
      284,  283,  282,  281,  280,  279,  278,  277,  276,  123,

      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
      254,  253,  252,  251,  250,  249,  248,  247,  246,  245,
      244,  243,  242,  241,  240,  239,  238,  237,  123,  232,
      231,  230,  229,  228,  227,  226,  225,  224,  223,  220,
      219,  218,  217,  216,  215,  214,  213,  212,  211,  210,
      209,  208,  207,  206,  205,  204,  203,  202,  201,  200,
      197,  196,  195,  194,  193,  192,  191,  190,  189,  178,
      177,  176,  175,  172,  171,  170,  169,  168,  167,  166,
      165,  164,  163,  162,  161,  160,  159,  158,  157,  156,

      153,  152,  151,  150,  149,  148,  147,  146,  145,  144,
      143,  142,  141,  140,  139,  138,  137,  136,  135,  123,
       61,  115,  100,   99,   98,   97,   85,   81,   80,   79,
       78,   76,   75,   74,   66,   64,  345,    3,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345
    } ;

static yyconst short int yy_chk[612] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,   18,   18,   18,   46,   35,
       20,   46,   20,   20,   20,   21,   62,   21,   21,   21,
       35,   37,   38,   39,   20,   20,   35,  343,   37,   21,

       21,   38,   49,   39,   37,   20,   45,   40,   47,   49,
       37,    7,   47,   20,   20,   40,   45,   40,   21,   21,
       51,   48,   52,   45,   48,   57,   59,   59,   64,   64,
      341,    8,   20,   51,   97,   48,   48,   52,   48,   97,
       65,   65,   65,  336,  122,   62,  120,  168,  115,   59,
      181,   64,   65,   65,   67,   67,   67,  115,  168,  120,
      120,  145,  145,   57,  235,  334,   67,   67,   71,  330,
       71,   65,   65,   71,   71,   71,   59,   68,   64,   68,
       68,   68,  275,  329,  120,   67,   67,  122,  132,  132,
      132,   68,   68,   69,  124,   69,   69,   69,   73,  181,

       73,   73,   73,  124,  124,  328,  233,   69,   69,  326,
       68,   68,   73,   73,  127,  324,  127,  322,  235,  127,
      127,  127,  129,  129,  129,  275,   69,   69,  133,  133,
      133,   73,   73,  179,  129,  129,  131,  234,  131,  182,
      321,  131,  131,  131,  233,  319,  179,  179,  182,  182,
      184,  184,  184,  129,  129,  185,  185,  185,  187,  187,
      187,  188,  188,  188,  318,  317,  316,  314,  312,  308,
      307,  179,  180,  306,  305,  234,  304,  303,  302,  301,
      300,  298,  295,  294,  291,  180,  180,  180,  287,  286,
      285,  283,  281,  280,  180,  180,  180,  180,  180,  180,

      279,  278,  277,  274,  272,  271,  269,  268,  267,  266,
      180,  265,  264,  180,  180,  180,  180,  180,  180,  346,
      262,  261,  346,  346,  346,  346,  346,  346,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  348,  260,  259,
      348,  258,  348,  348,  348,  348,  349,  349,  349,  349,
      350,  350,  350,  257,  255,  350,  351,  351,  351,  254,
      253,  351,  352,  352,  249,  352,  352,  352,  352,  352,
      352,  353,  353,  354,  354,  355,  355,  356,  356,  356,
      357,  357,  357,  357,  357,  357,  357,  357,  357,  248,
      247,  246,  245,  244,  242,  241,  240,  239,  238,  236,

      232,  231,  229,  228,  227,  226,  225,  224,  223,  222,
      221,  220,  219,  218,  217,  216,  215,  214,  213,  212,
      211,  209,  208,  207,  206,  205,  204,  202,  201,  200,
      199,  198,  195,  194,  193,  192,  190,  189,  183,  178,
      177,  176,  175,  174,  173,  172,  171,  170,  169,  167,
      166,  165,  164,  163,  162,  160,  159,  158,  157,  156,
      155,  154,  153,  152,  151,  150,  149,  148,  147,  146,
      144,  143,  142,  141,  139,  138,  137,  136,  135,  119,
      118,  117,  116,  114,  113,  112,  111,  110,  109,  108,
      107,  106,  105,  104,  103,  102,  101,  100,   99,   98,

       96,   95,   94,   93,   92,   91,   90,   89,   88,   87,
       86,   85,   84,   83,   82,   81,   80,   79,   78,   63,
       60,   50,   44,   43,   42,   41,   36,   31,   30,   29,
       28,   26,   24,   22,   19,   11,    3,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,

      345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
      345
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "scanner.ll"
#define INITIAL 0
/*
 *  MICO --- a free CORBA implementation
 *  Copyright (C) 1997-98 Kay Roemer & Arno Puder
 *
 *  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program; if not, write to the Free Software
 *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 *  Send comments and/or bug reports to:
 *                 mico@informatik.uni-frankfurt.de
 */
#line 24 "scanner.ll"

#include <CORBA.h>

#include <iostream.h>
#include <fstream.h>
#include <strstream.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

#include "prepro.h"
#include "parsenode.h"
#include "yacc.h"
#include <mico/template_impl.h>


#ifdef _WINDOWS
#define isatty _isatty
#endif


static CORBA::LongLong ascii_to_longlong( long base, const char *s )
{
  CORBA::LongLong ll = 0;
  while( *s != '\0' ) {
    char c = *s++;
    if( c >= 'a' )
      c -= 'a' - 'A';
    c -= '0';
    if( c > 9 )
      c -= 'A' - '0' - 10;
    ll = ll * base + c;
  }
  return ll;
}

static CORBA::LongDouble ascii_to_longdouble (const char *s)
{
  CORBA::LongDouble d;
#ifdef HAVE_SCANF_LF
  sscanf ((char *)s, "%Lf", &d);
#else
  /*
   * this is only an approximation and will probably break fixed<>
   * parameter calculation on systems where
   * sizeof(double) < sizeof(long double). but fortunately all
   * systems where scanf("%Lf") is known to be broken (Linux/Alpha
   * and HPUX) have sizeof(double) == sizeof(long double).
   */
  d = strtod ((char *)s, NULL);
#endif
  return d;
}

static char translate_char( const char *s )
{
  char c = *s++;
  
  if( c != '\\' )
    return c;
  c = *s;
  switch( c ) {
  case 'n':
    return '\n';
  case 't':
    return '\t';
  case 'v':
    return '\v';
  case 'b':
    return '\b';
  case 'r':
    return '\r';
  case 'f':
    return '\f';
  case 'a':
    return '\a';
  case '\\':
    return '\\';
  case '?':
    return '\?';
  case '\'':
    return '\'';
  case '"':
    return '"';
  case 'x':
  case 'X':
    return (char) ascii_to_longlong( 16, ++s );
  default:
    // Gotta be an octal
    return (char) ascii_to_longlong( 8, s );
  }
}


/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------*/
#line 740 "scanner.cc"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 156 "scanner.ll"


#line 894 "scanner.cc"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 346 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 345 );
		yy_cp = yy_last_accepting_cpos;
		yy_current_state = yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 158 "scanner.ll"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 159 "scanner.ll"
idl_line_no++;
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 160 "scanner.ll"
;
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 161 "scanner.ll"
{
			  yylval._str = CORBA::string_dup( yytext );
                          idl_line_no++;
                          return T_PRAGMA;
                        }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 166 "scanner.ll"
{
                          preprocessor_directive( yytext );
			  yylval._str = CORBA::string_dup( yytext );
                          return T_INCLUDE;
                        }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 171 "scanner.ll"
return T_LEFT_CURLY_BRACKET;
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 172 "scanner.ll"
return T_RIGHT_CURLY_BRACKET;
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 173 "scanner.ll"
return T_LEFT_SQUARE_BRACKET;
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 174 "scanner.ll"
return T_RIGHT_SQUARE_BRACKET;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 175 "scanner.ll"
return T_LEFT_PARANTHESIS;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 176 "scanner.ll"
return T_RIGHT_PARANTHESIS;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 177 "scanner.ll"
return T_COLON;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "scanner.ll"
return T_COMMA;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 179 "scanner.ll"
return T_SEMICOLON;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 180 "scanner.ll"
return T_EQUAL;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 181 "scanner.ll"
return T_SHIFTRIGHT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 182 "scanner.ll"
return T_SHIFTLEFT;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 183 "scanner.ll"
return T_PLUS_SIGN;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 184 "scanner.ll"
return T_MINUS_SIGN;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 185 "scanner.ll"
return T_ASTERISK;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 186 "scanner.ll"
return T_SOLIDUS;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 187 "scanner.ll"
return T_PERCENT_SIGN;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 188 "scanner.ll"
return T_TILDE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 189 "scanner.ll"
return T_VERTICAL_LINE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 190 "scanner.ll"
return T_CIRCUMFLEX;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 191 "scanner.ll"
return T_AMPERSAND;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 192 "scanner.ll"
return T_LESS_THAN_SIGN;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 193 "scanner.ll"
return T_GREATER_THAN_SIGN;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 195 "scanner.ll"
return T_CONST;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 196 "scanner.ll"
return T_TYPEDEF;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 197 "scanner.ll"
return T_FLOAT;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 198 "scanner.ll"
return T_DOUBLE;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 199 "scanner.ll"
return T_CHAR;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 200 "scanner.ll"
return T_WCHAR;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 201 "scanner.ll"
return T_FIXED;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 202 "scanner.ll"
return T_BOOLEAN;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 203 "scanner.ll"
return T_STRING;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 204 "scanner.ll"
return T_WSTRING;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 205 "scanner.ll"
return T_VOID;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 206 "scanner.ll"
return T_UNSIGNED;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 207 "scanner.ll"
return T_LONG;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 208 "scanner.ll"
return T_SHORT;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 209 "scanner.ll"
return T_FALSE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 210 "scanner.ll"
return T_TRUE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 211 "scanner.ll"
return T_STRUCT;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 212 "scanner.ll"
return T_UNION;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 213 "scanner.ll"
return T_SWITCH;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 214 "scanner.ll"
return T_CASE;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 215 "scanner.ll"
return T_DEFAULT;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 216 "scanner.ll"
return T_ENUM;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 217 "scanner.ll"
return T_IN;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 218 "scanner.ll"
return T_OUT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 219 "scanner.ll"
return T_INTERFACE;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 220 "scanner.ll"
return T_ABSTRACT;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 221 "scanner.ll"
return T_VALUETYPE;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 222 "scanner.ll"
return T_TRUNCATABLE;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 223 "scanner.ll"
return T_SUPPORTS;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 224 "scanner.ll"
return T_CUSTOM;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 225 "scanner.ll"
{
                          #ifdef USE_CORBA_2_1
			  yylval.ident = CORBA::string_dup( yytext );
			  return T_IDENTIFIER;
			  #else
			  return T_PUBLIC;
			  #endif
			}
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 233 "scanner.ll"
{
			  #ifdef USE_CORBA_2_1
			  yylval.ident = CORBA::string_dup( yytext );
			  return T_IDENTIFIER;
			  #else
			  return T_PRIVATE;
			  #endif
			}
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 241 "scanner.ll"
return T_FACTORY;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 242 "scanner.ll"
return T_NATIVE;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 243 "scanner.ll"
return T_VALUEBASE;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 245 "scanner.ll"
return T_SCOPE; 
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 247 "scanner.ll"
return T_MODULE;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 248 "scanner.ll"
return T_OCTET;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 249 "scanner.ll"
return T_ANY;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 250 "scanner.ll"
return T_SEQUENCE;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 251 "scanner.ll"
return T_READONLY;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 252 "scanner.ll"
return T_ATTRIBUTE;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 253 "scanner.ll"
return T_EXCEPTION;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 254 "scanner.ll"
return T_ONEWAY;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 255 "scanner.ll"
return T_INOUT;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 256 "scanner.ll"
return T_RAISES;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 257 "scanner.ll"
return T_CONTEXT;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 259 "scanner.ll"
return T_OBJECT;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 262 "scanner.ll"
{
			  yylval.ident = CORBA::string_dup(
			    yytext[0]=='_' ? yytext+1 : yytext );
			  return T_IDENTIFIER;
			}
	YY_BREAK
case 78:
#line 268 "scanner.ll"
case 79:
#line 269 "scanner.ll"
case 80:
#line 270 "scanner.ll"
case 81:
#line 271 "scanner.ll"
case 82:
#line 272 "scanner.ll"
case 83:
YY_RULE_SETUP
#line 272 "scanner.ll"
{
			  yylval._float = ascii_to_longdouble( yytext );
			  return T_FLOATING_PT_LITERAL;
			}
	YY_BREAK
case 84:
#line 277 "scanner.ll"
case 85:
#line 278 "scanner.ll"
case 86:
#line 279 "scanner.ll"
case 87:
YY_RULE_SETUP
#line 279 "scanner.ll"
{
                          string s = yytext;
                          s = s.substr( 0, s.length() - 1 );
			  yylval._fixed = ascii_to_longdouble (s.c_str());
			  return T_FIXED_PT_LITERAL;
			}
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 285 "scanner.ll"
{ 
			  yylval._int = ascii_to_longlong( 10, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 289 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 8, yytext );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 293 "scanner.ll"
{
			  yylval._int = ascii_to_longlong( 16, yytext + 2 );
			  return T_INTEGER_LITERAL;
			}
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 297 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 1, s.length() - 2 );
			  yylval._char = translate_char( s.c_str() );
			  return T_CHARACTER_LITERAL;
			}
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 303 "scanner.ll"
{
                          string s( yytext );
                          s = s.substr( 1, s.length() - 2 );
			  yylval._str = CORBA::string_dup( s.c_str() );
			  return T_STRING_LITERAL;
			}
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 309 "scanner.ll"
{
                          return T_UNKNOWN;
                        }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 313 "scanner.ll"
ECHO;
	YY_BREAK
#line 1474 "scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_last_accepting_cpos;
				yy_current_state = yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 346 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 346 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 345);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 313 "scanner.ll"


