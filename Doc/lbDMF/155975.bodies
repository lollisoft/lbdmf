class lbHCInterfaceRepository
!!!246087.cpp!!!	~lbHCInterfaceRepository()

	_CL_VERBOSE << "lbHCInterfaceRepository::~lbHCInterfaceRepository() called." LOG_
	free(searchArgument);
!!!246215.cpp!!!	getFirstEntity() : lb_I_FunctorEntity


	if (CurrentSearchMode == 0) {
		printf("SearchMode not set. Please call first lbHCInterfaceRepository::setCurrentSearchInterface(char* iface)\nOr any further other setCurrentSearch<Mode>(char* argument) function\n");
		return NULL;
	}
	
	if (CurrentSearchMode != 1) {
		printf("SearchMode currently not provided.\n");
		return NULL;
	}

	char* module = NULL;
	char* functor = NULL;
	bool  found = false;

// Add code here to overload exsisting interface definitions by custom repository

#ifndef LINUX
	#ifdef __WATCOMC__
	#define PREFIX "_"
	#endif
	#ifdef _MSC_VER
	#define PREFIX ""
	#endif
#endif
#ifdef LINUX
#define PREFIX ""
#endif

	if (strcmp(searchArgument, "lb_I_Container") == 0) {
	 	functor = PREFIX "instanceOfSkipList";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_InputStream") == 0) {
	 	functor = PREFIX "instanceOfInputStream";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_OutputStream") == 0) {
	 	functor = PREFIX "instanceOfOutputStream";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Log") == 0) {
		functor = PREFIX "instanceOfLogger";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_KeyBase") == 0) {
		functor = PREFIX "instanceOfIntegerKey";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Integer") == 0) {
		functor = PREFIX "instanceOfInteger";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Long") == 0) {
		functor = PREFIX "instanceOfLong";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Boolean") == 0) {
		functor = PREFIX "instanceOfBoolean";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_String") == 0) {
		functor = PREFIX "instanceOfString";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Parameter") == 0) {
		functor = PREFIX "instanceOfParameter";
		module = "lbClasses";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Database") == 0) {
		functor = PREFIX "instanceOfDatabase";
		module = "lbDB";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_PluginManager") == 0) {
		functor = PREFIX "instanceOfPluginManager";
		module = "lbPluginManager";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Plugin") == 0) {
		functor = PREFIX "instanceOfPlugin";
		module = "lbPluginManager";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_InterfaceRepository") == 0) {
	 	functor = "instanceOfInterfaceRepository";
		module = "lbDOMConfig";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_MetaApplication") == 0) {
		functor = PREFIX "instanceOfMetaApplication";
		module = "lbMetaApplication";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_EventMapper") == 0) {
		functor = PREFIX "instanceOfEventMapper";
		module = "lbMetaApplication";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_EventManager") == 0) {
		functor = PREFIX "instanceOfEventManager";
		module = "lbMetaApplication";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_Dispatcher") == 0) {
		functor = PREFIX "instanceOfDispatcher";
		module = "lbMetaApplication";
		found = true;
	}
	
	if (strcmp(searchArgument, "lb_I_EvHandler") == 0) {
		functor = PREFIX "instanceOfEvHandler";
		module = "lbMetaApplication";
		found = true;
	}

	if (strcmp(searchArgument, "lb_I_Locale") == 0) {
		functor = PREFIX "instanceOfLocale";
		module = "lbClasses";
		found = true;
	}


	lbFunctorEntity* fe = new lbFunctorEntity;
	fe->setModuleManager(manager.getPtr(), __FILE__, __LINE__);

	lb_I_FunctorEntity* _fe = NULL;
	fe->queryInterface("lb_I_FunctorEntity", (void**) &_fe, __FILE__, __LINE__);

	_fe->setModule(module);
	_fe->setFunctor(functor);

	if (!found) { 
		_CL_LOG << "Error; Requested interface not found in repository!" LOG_
		_LOG << "Error; Requested interface not found in repository!" LOG_
	}

	return _fe;
!!!246343.cpp!!!	initIntefaceList() : void

	char* name = NULL;
	char* savename = NULL;
        savename = strdup("#document/dtdHostCfgDoc/Modules/Module/Functions/Function/Functor/InterfaceName");
        name = strrchr(savename, '/');
        if (name == NULL) name = savename;
//        DOMlist = doc.getElementsByTagName(((name[0] == '/') ? &name[1] : name));
//        len = DOMlist.getLength();
        // Cleanup
        free(savename);
